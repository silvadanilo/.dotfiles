snippet namespace
    namespace `PhpNamespaceGet()`;
snippet nclass
	<?php
    declare(strict_types=1);

    namespace `PhpNamespaceGet()`;

	class `Filename()`
	{
		${0}
	}
snippet ninterface
    <?php
    declare(strict_types=1);

	namespace `PhpNamespaceGet()`;

	interface `Filename()`
	{
		${0}
	}
snippet construct1
    private $$1;

    public function __construct($${1:})
    {
        $this->$1 = $$1;
    }
snippet construct2
    private $$1;
    private $$2;

    public function __construct($${1:}, $${2:})
    {
        $this->$1 = $$1;
        $this->$2 = $$2;
    }
snippet construct3
    private $$1;
    private $$2;
    private $$3;

    public function __construct($${1:}, $${2:}, $${3:})
    {
        $this->$1 = $$1;
        $this->$2 = $$2;
        $this->$3 = $$3;
    }
snippet dump
    error_log(var_export($${1:}, true));
snippet dumpclass
    error_log(var_export(get_class($${1:}), true));
snippet dumpl
    error_log(__LINE__);
snippet __line__
    error_log(__LINE__);
snippet dumpm
    error_log(__METHOD__);
snippet __method__
    error_log(__METHOD__);
snippet whereami
    error_log(__CLASS__ . '::' . __METHOD__ . ', line: ' . __LINE__);
snippet trace
    error_log(var_export((new \Exception('TRACE'))->getTraceAsString(), true));
snippet stub
    $this->${1:}->expects($this->${2:}())
        ->method('${3:}')
        ->with(${4:})
        ->will($this->returnValue(${5:}))
    ;
snippet phpunit
    <?php
    declare(strict_types=1);

    namespace `PhpNamespaceGet()`;

    class ${2:`Filename()`} extends \PHPUnit_Framework_TestCase
    {
        ${3}
    }
snippet setUp
    public function setUp()
    {
        ${1:}
    }
snippet test
    public function test${1:}()
    {
        ${2:}
    }
snippet puf
    public function ${1}(${2})
    {
        ${3}
    }
snippet prf
    private function ${1}(${2})
    {
        ${3}
    }
